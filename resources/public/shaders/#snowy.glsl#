#ifdef GL_ES
precision mediump float;
#endif

uniform float time;
uniform vec2 mouse;
uniform vec2 resolution;

// Created by inigo quilez - iq/2013
// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0
// Unported (1.0+dot(d,d));
b *= 0.5;
p=m2*p;
}

return 140.0*a;
}


float map( in vec3 p )
{
  float h = terrain(p.xz);
  
  float ss = 0.03;
  float hh = h*ss;
  float fh = fract(hh);
  float ih = floor(hh);
  fh = mix( sqrt(fh), fh, smoothstep(50.0,140.0,h) );
  h = (ih+fh)/ss;
  
  return p.y - h;
}

float map2( in vec3 p )
{
  float h = terrain2(p.xz);

  
  float ss = 0.03;
  float hh = h*ss;
  float fh = fract(hh);
  float ih = floor(hh);
  fh = mix( sqrt(fh), fh, smoothstep(50.0,140.0,h) );
  h = (ih+fh)/ss;
  
  return p.y - h;
}

bool jinteresct(in vec3 rO, in vec3 rD, out float resT )
{
  float h = 0.0;
  float t = 0.0;
  for( int j=0; j<120; j++ )
    {
      //if( t>2000.0 ) break;
      
      vec3 p = rO + t*rD;
      if( p.y>300.0 ) break;
      h = map( p );

      if( h<0.1 )
        {
          resT = t; 
          return true;
        }
      t += max(0.1,0.5*h);

    }

  if( h<5.0 )
    {
      resT = t;
      return true;
    }
  return false;
}

float sinteresct(in vec3 rO, in vec3 rD )
{
  float res = 1.0;
  float t = 0.0;
  for( int j=0; j<50; j++ )
    {
      //if( t>1000.0 ) break;
      vec3 p = rO + t*rD;

      float h = map( p );

      if( h<0.1 )
        {
          return 0.0;
        }
      res = min( res, 16.0*h/t );
      t += h;

    }

  return clamp( res, 0.0, 1.0 );
}

vec3 calcNormal( in vec3 pos, float t )
{
  float e = 0.001;
  e = 0.001*t;
  vec3  eps = vec3(e,0.0,0.0);
  vec3 nor;
  nor.x = map2(pos+eps.xyy) - map2(pos-eps.xyy);
  nor.y = map2(pos+eps.yxy) - map2(pos-eps.yxy);
  nor.z = map2(pos+eps.yyx) - map2(pos-eps.yyx);
  return normalize(nor);
}

vec3 camPath( float time )
{
  vec2 p = 600.0*vec2( cos(1.4+0.37*time), 
                       cos(3.2+0.31*time) );

  return vec3( p.x, 0.0, p.y );
}

void main(void)
{
  vec2 xy = -1.0 + 2.0*gl_FragCoord.xy / resolution.xy;

  vec2 s = xy*vec2(1.75,1.0);
  
  float time =  time*.15;

  vec3 light1 = normalize( vec3(  0.4, 0.22,  0.6 ) );
  vec3 light2 = vec3( -0.707, 0.000, -0.707 );


  vec3 campos = camPath( time );
  vec3 camtar = camPath( time + 3.0 );
  campos.y = terrain( campos.xz ) 
}